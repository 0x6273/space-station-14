using Content.Shared.AME;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.AME.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AmeControllerWindow : DefaultWindow
    {
        public AmeControllerWindow(AmeControllerBoundUserInterface ui)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (AmeControllerBoundUserInterfaceState) state;
            var hasFuelJar = castState.FuelAmount is not null;

            EjectButton.Disabled = !hasFuelJar || castState.IsInjecting;
            ToggleInjectionButton.Disabled = !hasFuelJar || castState.CoreCount == 0;
            FuelAmount.Text = hasFuelJar
                ? FuelAmount.Text = $"{castState.FuelAmount}"
                : Loc.GetString("ame-window-fuel-not-inserted-text");
            InjectionStatus.Text = castState.IsInjecting
                ? Loc.GetString("ame-window-engine-injection-status-injecting-label")
                : Loc.GetString("ame-window-engine-injection-status-not-injecting-label");
            CoreCount.Text = $"{castState.CoreCount}";
            InjectionAmount.Text = $"{castState.InjectionAmount}";
        }
    }
}
